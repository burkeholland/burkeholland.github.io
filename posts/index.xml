<rss version="2.0" 
  xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Burke Holland</title>
    <link>https://burkeholland.github.io/posts/</link>
    <description>Recent content in Posts on Burke Holland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Mar 2020 08:44:47 -0500</lastBuildDate>
    
        <atom:link href="https://burkeholland.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<title>Professional quality audio with the Blue Yeti, GarageBand and Screenflow</title>
<link>https://burkeholland.github.io/posts/audio-how-to/</link>
<pubDate>Wed, 18 Mar 2020 08:44:47 -0500</pubDate>
      
      <guid>https://burkeholland.github.io/posts/audio-how-to/</guid>
<description>

&lt;p&gt;One of the best things you can do to improve the quality of your screencasts, is improve the quality of your audio. I&amp;rsquo;m assuming that unless your name is &amp;ldquo;Dr. Dre&amp;rdquo;, you probabaly do not have a professional sound studio in your basement full of high-end equipment and expensive software. And if you&amp;rsquo;re like me, you don&amp;rsquo;t even have a basement.&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;do&lt;/em&gt; have is a Blue Yeti microphone, GarageBand and a copy of Screenflow that I can barely afford. I&amp;rsquo;ve struggled for a long time to get my audio to sound &amp;ldquo;good&amp;rdquo;. I&amp;rsquo;ve gone back and forth on what the bar for that is. When I first got started, everything I recorded sounded like I was at the bottom of an empty can of tomato soup. With the help of some friends, some Googling and the wisdom of my wife (who has no professional audio training, but a legit amount of commmon sense) I&amp;rsquo;ve seriously improved my station. In this post, I&amp;rsquo;ll share with you the tips and tricks that you can use to immediately improve your audio quality.&lt;/p&gt;

&lt;h2 id=&#34;the-room&#34;&gt;The Room&lt;/h2&gt;

&lt;p&gt;First off, let&amp;rsquo;s talk about your recording space. You are going to want to work and record in the same area. I used to unplug and go into my closet and record. You don&amp;rsquo;t need to do this. But you do need to do some basic things to your work area.&lt;/p&gt;

&lt;p&gt;When I first started recording in my office, everything was so echo&amp;rsquo;y. It sounded like I was in a bathtub. My wife pointed out to me that the bare walls, window and floor were not helping. She instituted 3 things in my office that made a whole world of difference.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;She got an area rug. If you have hardwood, tile or laminate floors, an area rug is going to be essential. Sound &lt;strong&gt;loves&lt;/strong&gt; to bounce off anything it can, and it &lt;em&gt;really&lt;/em&gt; likes hard, flat surfaces. An area rug will work wonders.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;She hung curtains next to the window. My drapes don&amp;rsquo;t even close. They are just there to soak up the sound.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/office-curtains.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;She hung things on the walls. Pictures, guitars, sock monkeys. You get the idea.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/office-walls.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These 3 things were enough to dampen the sound in the room so that it is fit for recording. You don&amp;rsquo;t actually need a bunch of sound panels or a special box you made out of plywood that sits weirdly in your garage. Just a rug, some drapes and a few wall treatments will do the trick.&lt;/p&gt;

&lt;p&gt;Next, let&amp;rsquo;s talk about the equipment.&lt;/p&gt;

&lt;h2 id=&#34;the-equipment&#34;&gt;The Equipment&lt;/h2&gt;

&lt;p&gt;At the risk of looking extremely self-absorbed, here is a picture of my current recording setup&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/my-setup.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My setup will run you about 250$ total. Here are the essential components:&lt;/p&gt;

&lt;h3 id=&#34;blue-yeti-microphone-https-www-amazon-com-blue-yeti-usb-microphone-blackout-dp-b00n1ypxw2-ref-sr-1-2-keywords-blue-yeti-qid-1584566560-sr-8-2-130&#34;&gt;&lt;a href=&#34;https://www.amazon.com/Blue-Yeti-USB-Microphone-Blackout/dp/B00N1YPXW2/ref=sr_1_2?keywords=blue+yeti&amp;amp;qid=1584566560&amp;amp;sr=8-2&#34;&gt;Blue Yeti Microphone&lt;/a&gt; (130$)&lt;/h3&gt;

&lt;p&gt;This is probably the most popular mic on the market. Some people will say the RODE is better, but don&amp;rsquo;t listen to them. Listen to me. I&amp;rsquo;m writing the blog post.&lt;/p&gt;

&lt;h3 id=&#34;rode-psa-1-swivel-mount-boom-arm-https-www-amazon-com-gp-product-b001d7uybo-ref-ppx-yo-dt-b-search-asin-title-ie-utf8-psc-1-100&#34;&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B001D7UYBO/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;psc=1&#34;&gt;RODE PSA 1 Swivel Mount Boom Arm&lt;/a&gt; (100$)&lt;/h3&gt;

&lt;p&gt;If you plan to record audio and the screen at the same time, you have got to get the mic off of your work surface. If you don&amp;rsquo;t, the mic is going to pick up the concussion from your typing and it&amp;rsquo;s going to sound less like a keyboard and more like a death metal drum solo.&lt;/p&gt;

&lt;h3 id=&#34;foam-windscreen-https-www-amazon-com-gp-product-b01bxay8k8-ref-ppx-yo-dt-b-search-asin-title-ie-utf8-psc-1-13&#34;&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B01BXAY8K8/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;amp;psc=1&#34;&gt;Foam Windscreen&lt;/a&gt; (13$)&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll see people with fancy windscreens and pop filters. That&amp;rsquo;s the big circle that you usually see between the mic and Taylor Swift when she&amp;rsquo;s in the recording studio. I &lt;em&gt;almost&lt;/em&gt; bought one of these until my colleague &lt;a href=&#34;https://twitter.com/spboyer&#34;&gt;Shayne Boyer&lt;/a&gt; pointed out that you can buy a 13$ Windscreen and it works brilliantly.&lt;/p&gt;

&lt;p&gt;OK - that&amp;rsquo;s the equipment. Let&amp;rsquo;s talk about the mic configuration for a moment. There are a few key things you need to know about it.&lt;/p&gt;

&lt;h2 id=&#34;mic-configuration&#34;&gt;Mic Configuration&lt;/h2&gt;

&lt;p&gt;The Blue Yeti is a condensor mic. This means that it&amp;rsquo;s super sensitive. If you don&amp;rsquo;t adjust it correctly, it&amp;rsquo;s going to pick up everything. And I do mean everything. If someone next door sneezes, your ears won&amp;rsquo;t pick it up, but I swear you will hear it on the video.&lt;/p&gt;

&lt;p&gt;You can fix this, you just need to get the settings right. On the mic, there is a side that has a &amp;ldquo;Gain&amp;rdquo; and a &amp;ldquo;Pattern&amp;rdquo; option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/pattern-gain.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;Gain&amp;rdquo; is how sensitive you want the mic to be. Since you only want it recording your voice, you want to turn the gain all the way down. That seems completely counter-intuitive, but I promise, this is where you want it.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;Pattern&amp;rdquo; controls where on the mic the audio is picked up. All you have to know here is to pick the upside-down ♡ setting. This setting means that the microphone will pick up audio from the front-side only. That&amp;rsquo;s the side you are speaking into, so that&amp;rsquo;s what you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/yeti-front.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you talk into the mic, you want it upright like you see it in the picture above. Talk into it from the front side, not the very top. The Blue Yeti site shows it like this&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/do-dont.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OK - you&amp;rsquo;re setup to record. The next step is to configure the recording software. When I record screencasts, I record audio first, then I record the video and edit it to go with the audio. This is so that I can record the audio with GarageBand and edit it before I add in the video.&lt;/p&gt;

&lt;h2 id=&#34;working-with-garageband&#34;&gt;Working with GarageBand&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t have a Mac, I&amp;rsquo;m sorry. Feel free to skip over this section, and frankly, the rest of this post. I have no idea how to do this on Windows, although I&amp;rsquo;m sure there are some great alternatives.&lt;/p&gt;

&lt;p&gt;For you Mac people, Garage Band is really all you need.&lt;/p&gt;

&lt;p&gt;I record a Narration vocal and I created a custom audio setting using &lt;a href=&#34;https://twitter.com/nraboy&#34;&gt;Nic Raboy&amp;rsquo;s&lt;/a&gt; excellent setup from &lt;a href=&#34;https://www.thepolyglotdeveloper.com/2016/02/create-podcast-episode-garageband-mac/&#34;&gt;an article on this same topic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/garageband-settings.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, change the way GarageBand is showing your track. By default, it shows &amp;ldquo;Beats and Project&amp;rdquo;, which displays your audio over time as &amp;ldquo;Bars&amp;rdquo;. This isn&amp;rsquo;t super helpful for seeing how long your track really is. To fix this, you want to change this so it displays your track as &amp;ldquo;Time&amp;rdquo;. This is a hard menu to find, but it&amp;rsquo;s that tiny arrow next to the &amp;ldquo;key&amp;rdquo; display.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/garageband-key-display.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Select &amp;ldquo;Time&amp;rdquo; from the menu that pops up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/garageband-time.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After you record your audio, you&amp;rsquo;ll want to edit out your breathing, as well as pops and clicks and other mouth sounds you would rather not expose your listeners to. To do that, select the &amp;ldquo;Show Editor&amp;rdquo; option from the view menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/garageband-show-editor.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This will open up an editor in the bottom area that allows you to zoom in and edit out parts of the track. You&amp;rsquo;ll be able to see your breathing just by looking at the track. It&amp;rsquo;s the flat part in between sections. To remove that area, click and drag to highlight the region you want to remove, and then press &amp;ldquo;Delete&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/garageband-click-and-drag.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to move your sections of audio closer together as you cut out the breathing, use the upper track portion. To do the fine grain editing itself, use the editor portion below.&lt;/p&gt;

&lt;p&gt;OK! All your heavy breathing is now out of the picture and your audio sounds good. Export from GarageBand using the &amp;ldquo;Share/Export Song To Disk&amp;rdquo; option.&lt;/p&gt;

&lt;p&gt;The last step is to pull it into Screenflow and apply some final tweaks.&lt;/p&gt;

&lt;h2 id=&#34;screenflow-audio-tweaks&#34;&gt;Screenflow Audio Tweaks&lt;/h2&gt;

&lt;p&gt;Again, this is Mac specific. I do feel bad about the lack of cross-platform-icity in this article. That&amp;rsquo;s got to count for something.&lt;/p&gt;

&lt;p&gt;In Screenflow, I pull in the audio and then I record my screen to match the audio. This can be a bit tedious, but usually results in a higher quality video. One of the last things I do is tweak the audio in Screenflow.&lt;/p&gt;

&lt;p&gt;I select the entire audio segment and I apply two options&amp;hellip;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Smooth Volume Levels&lt;/li&gt;
&lt;li&gt;Remove Background Noise (50%)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/screenflow-audio.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;and-cut&#34;&gt;And&amp;hellip;..CUT&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it! Hopefully there are some tips in here that you find helpful. Don&amp;rsquo;t be too hard on yourself over your audio. You are never going to get it perfect, but these simple steps should get you about 90% of the way there. The rest is all found in Dr. Dre&amp;rsquo;s basement.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Trimming expenses on The Urlist with Azure Cosmos DB Free Tier</title>
<link>https://burkeholland.github.io/posts/cosmos-free-tier/</link>
<pubDate>Tue, 17 Mar 2020 18:14:00 -0500</pubDate>
      
      <guid>https://burkeholland.github.io/posts/cosmos-free-tier/</guid>
<description>

&lt;p&gt;&lt;summary&gt;
Summary: We migrated &lt;a href=&#34;https://www.theurlist.com&#34;&gt;theurlist.com&lt;/a&gt; to the new Cosmos DB Free Tier and shaved ~35$ per month off of our Azure bill. Cosmos DB Free Tier gives you 400 RU/s for free every month. This should be more than enough for most small projects.&lt;/p&gt;

&lt;div class=&#34;cta-container&#34;&gt;
&lt;a class=&#34;cta&#34; href=&#34;https://devblogs.microsoft.com/cosmosdb/build-apps-for-free-with-azure-cosmos-db-free-tier/?WT.mc_id=personal-blog-buhollan&#34;&gt;Get Azure Cosmos DB Free Tier&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/summary&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.theurlist.com&#34;&gt;theurlist.com&lt;/a&gt; is a project that I wrote with my colleague &lt;a href=&#34;https://twitter.com/cecilphillip&#34;&gt;Cecil Phillip&lt;/a&gt; last year. We wanted to see if we could build a site on Azure that was two things&amp;hellip;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Serverless&lt;/li&gt;
&lt;li&gt;Cheap&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you would think that &amp;ldquo;cheap&amp;rdquo; would go hand-in-hand with &amp;ldquo;Serverless&amp;rdquo;, and that&amp;rsquo;s true. But there are portions of theurlist.com that are not strictly &amp;ldquo;Serverless&amp;rdquo; by definition because those pieces didn&amp;rsquo;t exist in Azure at the time. One of those is our database - Azure Cosmos DB.&lt;/p&gt;

&lt;p&gt;Azure Cosmos DB is the NoSQL data store that backs everything that theurlist.com does. Cosmos DB does not yet allow you to pay by request, or only for what you use. You need to buy something called &amp;ldquo;Request Units per Second&amp;rdquo; up front in batches. The lowest amount you can buy is 400, and that costs ~24\$ per month.&lt;/p&gt;

&lt;p&gt;The database for theurlist.com is dead simple. It&amp;rsquo;s one database with one collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/linkylinkdb.png&#34; alt=&#34;Cosmos DB instance in Data Explorer&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The database is called &amp;ldquo;linkylinkdb&amp;rdquo;. The original working name for this project was &amp;ldquo;Linky Link&amp;rdquo;. Although &lt;a href=&#34;http://linkylink.com/&#34;&gt;linkylink.com&lt;/a&gt; was already registered and is the home page of a dog named &amp;ldquo;Lincoln&amp;rdquo; where you can see a slide show of him in various poses. It&amp;rsquo;s probably a better use of the URL if we&amp;rsquo;re being honest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Monthly traffic to theurlist.com is around 60K visits. This equates to around 2 ru/s in Cosmos DB. TWO. We are currently paying for 400. That&amp;rsquo;s 200 times more throughput than we need and we&amp;rsquo;re paying for it. And sometimes we don&amp;rsquo;t even use that. In fact, in the last 7 days, we haven&amp;rsquo;t even averaged 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/cosmos-db-rus.png&#34; alt=&#34;The average number of Cosmos DB RU/s displayed in Azure portal&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Our 400 RU cost each month, combined with with us occasionally upping the RU/s to do load testing demos tipped our total Cosmos DB bill to around 32\$ per month.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/cosmos-db-old-cost.png&#34; alt=&#34;Cosmos DB cost summary&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Most of that we simply aren&amp;rsquo;t using, but we have to pay for it anyway. Which, doesn&amp;rsquo;t feel great. In our endless persuit of running a cost-effective app on Azure, we were excited to learn about the launch of the new Cosmos DB Free Tier.&lt;/p&gt;

&lt;h2 id=&#34;migrating-to-the-cosmos-db-free-tier&#34;&gt;Migrating to the Cosmos DB Free Tier&lt;/h2&gt;

&lt;p&gt;Cosmos DB has officially launched a &lt;a href=&#34;https://devblogs.microsoft.com/cosmosdb/build-apps-for-free-with-azure-cosmos-db-free-tier/?WT.mc_id=personal-blog-buhollan&#34;&gt;free tier&lt;/a&gt;. But what exactly does that mean?&lt;/p&gt;

&lt;p&gt;Free Tier allows you to have one Cosmos DB account where you apply a &amp;ldquo;Free Tier&amp;rdquo; discount. This gives you the first 400 RU/s free every month. They are deducted from the bill. For theurlist.com, this is perfect. We aren&amp;rsquo;t anywhere &lt;em&gt;near&lt;/em&gt; 400 RU/s. And based on my calculations, if 60K views equates to 2 RU/s, we could go up to 12 MILLION requests per month before we get to 400 RU/s. That&amp;rsquo;s a LOT of traffic.&lt;/p&gt;

&lt;p&gt;Last week, we migrated our database to the Cosmos DB free tier. We filmed the whole thing so you can see how to move your Cosmos DB database if you&amp;rsquo;ve got a small project like we do. There are two options you can use in terms of tools to do this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ms-adf.azure.com?WT.mc_id=personal-blog-buhollan&#34;&gt;Azure Data Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ms-adf.azure.com?WT.mc_id=personal-blog-buhollan&#34;&gt;Cosmos DB Migration Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Cosmos DB Migration tool is Windows only, so we opted for the Azure Data Factory, which is browser-based.&lt;/p&gt;

&lt;p&gt;The downside of the Azure Data Factory is that we had to create the database and collection before we could migrate the data. If you have a lot of databases or collections, and or you have lots of triggers and stored procedures, you&amp;rsquo;re better off using the Cosmos DB Migration Tool.&lt;/p&gt;

&lt;p&gt;We decided to record the process in case you are looking to migrate your own Cosmos DB database to the Free Tier. Enjoy!&lt;/p&gt;

&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;iframe width=&#34;720&#34; height=&#34;405&#34; src=&#34;https://www.youtube.com/embed/kEuEvPtgaK0&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
</item>
    
    <item>
<title>How to create a Reminder on Apple Watch without creating a Reminder</title>
<link>https://burkeholland.github.io/posts/apple-watch-reminders/</link>
<pubDate>Wed, 29 Jan 2020 07:53:12 -0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/apple-watch-reminders/</guid>
<description>

&lt;p&gt;I have an Apple Watch (&lt;strong&gt;not&lt;/strong&gt; cellular), and I love it. Not just because it lets everyone know that I&amp;rsquo;m better than them, but also for it&amp;rsquo;s ability to sync and store all of my audio to be used offline. I can download my music (including Apple Music), podcasts and &lt;a href=&#34;https://www.audible.com/ep/apple&#34;&gt;now even Audible books&lt;/a&gt; to my Watch and take it all with me when I exercise. This means I don&amp;rsquo;t have to strap my iPhone to arm like giant medievil shield. I can&amp;rsquo;t understate how much I enjoy this feature of the watch. If all the thing could do was play my music, podcasts and audio books without requiring a connection, it would still be worth the price.&lt;/p&gt;

&lt;p&gt;The one other thing that I use the Watch for with some frequency, is reminders.&lt;/p&gt;

&lt;p&gt;Apple Reminders are how I function in life. I don&amp;rsquo;t know how everyone else out there gets by, but I always feel like I have a thousand things that I need to get done. And if I don&amp;rsquo;t do them, nobody will. These are work things, yes. But they are also personal items: pay off the credit card. Pick up medication. Remind one of the kids about an upcoming assignment that there is a 100% chance they have not yet completed.&lt;/p&gt;

&lt;p&gt;I create these reminders with Siri via the Apple Watch. Now, I&amp;rsquo;d like to gloss over that last sentence because I have so much to say about how much I don&amp;rsquo;t enjoy that. Or the fact that it only works about 50% of the time. The rest of the time it just ignores me, cuts me off, or creates a cryptic reminder that is a pretty far cry from what I actually said. Like this one&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/reminder-bs.png&#34; alt=&#34;Apple Reminder that says &amp;quot;Finish the BS of a proposal&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I mean, all my proposals are technically BS, but I have no idea what this is supposed to mean. Here&amp;rsquo;s another one&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/reminder-warts.png&#34; alt=&#34;Apple Reminder that says &amp;quot;Paint the warts&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Again. I&amp;rsquo;m nearly certain that is not what I said. Now I have to decode that like some sort of Saturday morning NPR gameshow.&lt;/p&gt;

&lt;p&gt;And look - my memory is bad and getting worse. When I say I use Reminders a lot, I mean it. I use it for everything. For example&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/reminder-gate-check.png&#34; alt=&#34;Apple Reminder that says &amp;quot;You gate checked your bag&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I would (and have) walked off the plane and nearly made it to an Uber before I remembered that I don&amp;rsquo;t have my bag. It&amp;rsquo;s that bad y&amp;rsquo;all. You have no idea what it was like trying to get through school as a child. Or if you have ADD, maybe you do. I have three kids and one of them struggles with it just like I did. He can barely remember to leave the house with pants on, let alone what homework he needs to do, what paper is where or what test is when. So I set an Apple Reminder for myself to remind him. Apple Reminders are how I function in life.&lt;/p&gt;

&lt;p&gt;The thing is, you can&amp;rsquo;t create a reminder from your Apple Watch if the phone isn&amp;rsquo;t nearby. I always have my phone on me or at least nearby. Unless I&amp;rsquo;m out jogging.&lt;/p&gt;

&lt;h2 id=&#34;jogging-the-memory&#34;&gt;Jogging the memory&lt;/h2&gt;

&lt;p&gt;For some reason, jogging my body also jogs my brain. I tend to remember something important that I need to do when I&amp;rsquo;m 2.5 miles from the house and my phone. This is a panicky moment for me. I have an important thing I need to do, and there is no way I will remember by the end of my run. I know myself too well. But I can&amp;rsquo;t create a reminder because Siri won&amp;rsquo;t work without the phone. This has happened to me so often that I came up with a way to use my phone to create a Reminder quickly (while I&amp;rsquo;m running) and offline, without actually creating a reminder.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s simple - just change the Watch face.&lt;/p&gt;

&lt;p&gt;By default, my Watch face is the &amp;ldquo;Infograph Modular&amp;rdquo;. For those who don&amp;rsquo;t know all of the Apple Watch faces by name, that&amp;rsquo;s this one&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://burkeholland.github.io/media/infograph-modular.png&#34; alt=&#34;Infograph Modular Apple Watch face&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;If I swipe right (swipe-right joke redacted) two times, I get the Mickey Mouse face&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://burkeholland.github.io/media/mickey-mouse.png&#34; alt=&#34;Mickey Mouse Apple Watch face&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Now, at some point after I get home and finish my run, I will look at my watch and see Mickey. That will remind me of the thing I need to do. It works. Every time. I can instantly recall what I was thinking of at the time I made Mickey front-and-center in my life. Then I complete the task and change the face back.&lt;/p&gt;

&lt;p&gt;Now here&amp;rsquo;s what&amp;rsquo;s fascinating - this &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; work if I switch to some other face besides Mickey. It will work in so much as it reminds me that I needed to do something, but at least 50% of the time I can&amp;rsquo;t remember what that something is!&lt;/p&gt;

&lt;p&gt;I have completely unscientific idea as to why my brain is able to associate Mickey with another idea, and use that as a marker for recall with almost 100% accuracy. The difference between the Mickey face and all the other faces is that Mickey illicits an emtional response from me. It&amp;rsquo;s slight, but it&amp;rsquo;s there. I &lt;em&gt;think&lt;/em&gt; it&amp;rsquo;s nastalgia. That seems most likely since Disney was such a core part of my childhood. Even as an adult, the thought of going to Disney World gets me excited, and I&amp;rsquo;m really not that into Disney anymore as a 41 year-old. I think it&amp;rsquo;s that emotional trigger coupled with the idea that makes the recall so effective. That&amp;rsquo;s what makes it stick. It&amp;rsquo;s not that I&amp;rsquo;m associating Mickey with &amp;ldquo;pay off the credit card&amp;rdquo; (although I&amp;rsquo;m sure a LOT of people do), but that I&amp;rsquo;m associating &amp;ldquo;Pay off the credit card&amp;rdquo; with the emotional response that is triggered when I &lt;em&gt;see&lt;/em&gt; Mickey.&lt;/p&gt;

&lt;p&gt;So I don&amp;rsquo;t know what this post is actually about. It&amp;rsquo;s either 1) How dissapointing Siri is 2) How to remember to do something by changing your Apple Watch face or 3) Why the brain is able to hold certain associations better than others. It was supposed to be #2, so let&amp;rsquo;s go with that. If you have an Apple Watch, now you know how to create a reminder without actually creating a reminder.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Cosmos CRUD</title>
<link>https://burkeholland.github.io/posts/cosmos-crud/</link>
<pubDate>Thu, 23 Jan 2020 08:23:18 -0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/cosmos-crud/</guid>
<description>

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/sql-api-nodejs-application?WT.mc_id=personal-blog-buhollan&#34;&gt;Cosmos DB JavaScript SDK&lt;/a&gt; is clean - I like it. But I feel like I always end up forgetting how to CRUD.&lt;/p&gt;

&lt;p&gt;For the uninitiated in database street-slang, CRUD means Create, Read, Update And Delete. Feel free to use that if you find yourself in a turf war or dance-off.&lt;/p&gt;

&lt;p&gt;Well, I take that back. I can &amp;ldquo;read&amp;rdquo; everything purty gud. Actually, I can &amp;ldquo;create&amp;rdquo; as well. It&amp;rsquo;s the retrieving of one item that always throw me off. This is because of partition keys. Partition keys always hang me up (because I am but a simple man) and, well, I need a reminder for how they do and don&amp;rsquo;t affect retrieving an item, so that&amp;rsquo;s what I&amp;rsquo;m going to document in this here article.&lt;/p&gt;

&lt;p&gt;Assume that we&amp;rsquo;re working with the following document structure with a partition key on &amp;ldquo;/brand/name&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Artificial Tree&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Drillco&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;stockUnits&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;654&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;66d7134f-ee03-4cab-b448-ab3bb5098a6f&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assume that all of the following examples have the following connection information&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CosmosClient&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;@azure/cosmos&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CosmosClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CONNECTION_STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;database&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tailwind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;products&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;creating-an-item&#34;&gt;Creating an item&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;productToCreate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hammer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ACME&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;stockUnits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1500&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that Cosmos DB auto-creates an id if you don&amp;rsquo;t pass one in. It will be a GUID.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;reading-all-items&#34;&gt;Reading all items&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iterator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fetchAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;products&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;reading-one-item&#34;&gt;Reading one item&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;66d7134f-ee03-4cab-b448-ab3bb5098a6f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Drillco&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes you don&amp;rsquo;t have a partition key. In that case, you&amp;rsquo;ll want to pass &lt;code&gt;undefined&lt;/code&gt; as the second parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;66d7134f-ee03-4cab-b448-ab3bb5098a6f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;update-an-item&#34;&gt;Update an item&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// just like with reading one item, if your collection doesn&amp;#39;t have a partition key,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// pass &amp;#34;undefined&amp;#34; as the second parameter - container.item(product.id, undefined);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemToUpdate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;itemToUpdate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Artificial Tree Updated&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Drillco&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;stockUnits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;654&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;66d7134f-ee03-4cab-b448-ab3bb5098a6f&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that you &lt;strong&gt;have&lt;/strong&gt; to include the id on the object that you pass in to the &lt;code&gt;replace&lt;/code&gt; function. Even though you already specified it when you retrieved the item to update.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;delete-an-item&#34;&gt;Delete an item&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// just like with reading one item, if your collection doesn&amp;#39;t have a partition key,
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// pass &amp;#34;undefined&amp;#34; as the second parameter - container.item(product.id, undefined).delete();
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;66d7134f-ee03-4cab-b448-ab3bb5098a6f&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Drillco&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;partition-key-values-vs-names&#34;&gt;Partition key values vs names&lt;/h2&gt;

&lt;p&gt;The main takeaway from this article (besides my poor use of grammer and analogy) should be that CosmosDB wants a partition key VALUE, not name. When I was first working with the SDK, I would try to pass in the partition key name (/brand/name). This would throw an error telling me that an object with id of &lt;em&gt;whatever&lt;/em&gt; didn&amp;rsquo;t exist. That&amp;rsquo;s because I needed to pass in the &lt;em&gt;value&lt;/em&gt; of the partition key, not the name. This is why you need to pass in &lt;em&gt;undefined&lt;/em&gt; if you do &lt;strong&gt;not&lt;/strong&gt; have a partition key defined for your collection.&lt;/p&gt;

&lt;p&gt;There is a pretty good tutorial you can go through &lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/sql-api-nodejs-application?WT.mc_id=personal-blog-buhollan&#34;&gt;here&lt;/a&gt; that covers this in more detail and shows it in a Node/Express context.&lt;/p&gt;

&lt;p&gt;I hope this helps. Good luck out there.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>The 3 Laws of Serverless</title>
<link>https://burkeholland.github.io/posts/laws-of-serverless/</link>
<pubDate>Mon, 13 Jan 2020 15:58:22 -0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/laws-of-serverless/</guid>
<description>

&lt;p&gt;A wise man once said this about Serverless&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/serverless-quote.png&#34; alt=&#34;Quote: It&#39;s not important to understand what serverless means. It&#39;s only important that you know the word an you are not afraid to use it in a blog post.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So wise! So profound. So obnoxiously vain to use your own quote.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Serverless&amp;rdquo;, is a buzzword. We can&amp;rsquo;t seem to agree on what it actaully means, so it ends up meaning nothing at all. Much like &amp;ldquo;cloud&amp;rdquo; or &amp;ldquo;dynamic&amp;rdquo; or &amp;ldquo;synergy&amp;rdquo;. You just wait for the right time in a meeting to drop it, walk to the board and draw a Venn Diagram, and then just sit back and wait for your well-deserved promotion.&lt;/p&gt;

&lt;p&gt;A lot of very smart people have &lt;em&gt;tried&lt;/em&gt; to define the word in a meaningful way. Here&amp;rsquo;s one that you might have seen before..&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Build applications without thinking about servers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I actually think this is pretty good at answering the &amp;ldquo;Wait! How can there be no server!!?!?!&amp;rdquo; question. But I think this definition falls a tad on the naive side.&lt;/p&gt;

&lt;p&gt;Nobody really thinks about servers when they are writing their code. I mean, I doubt any developer has ever thrown up their hands and said &amp;ldquo;Whoa, whoa, whoa. Wait just a minute. We&amp;rsquo;re not declaring any variables in this joint until I know what server we&amp;rsquo;re going to be running this on.&amp;rdquo; Or maybe you do. I have never ever done that. I always do it AFTER I&amp;rsquo;ve written the application. Come to think of it, maybe that explains a lot.&lt;/p&gt;

&lt;p&gt;But besides, isn&amp;rsquo;t that the whole point of a Platform as a Service (PaaS)? Don&amp;rsquo;t services like Azure and Heroku and a host of others already enable you to deploy your code without knowing anything about the physical server where it&amp;rsquo;s running? Haven&amp;rsquo;t we solved this problem?&lt;/p&gt;

&lt;p&gt;And if all of that is true, it seems to me that nearly everything in the cloud that is an &amp;ldquo;as a Service&amp;rdquo; product would be Serverless. Which means it would be easier to assume that everything is &amp;ldquo;Serverless&amp;rdquo; and just try to identify when something is not. I don&amp;rsquo;t even know what we could call that. Serverfull? Server as a Service? I know! VIRTUAL MACHINES.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think you can explain Serverless in one sentence. This is because Serverless isn&amp;rsquo;t a single concept. It&amp;rsquo;s really 3 concepts that are used together to create a new type of cloud service. So don&amp;rsquo;t feel bad if your pug doesn&amp;rsquo;t get it when you try to break it down. It&amp;rsquo;s not your fault and a pug is a dog. I&amp;rsquo;m relatively sure that mine forgets nearly everything every 24 hours. Every day I tell it to get off the couch and it acts like it&amp;rsquo;s never heard this information before.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the 3 properties that a technology must exhibit to be considered Serverless. These are the &amp;ldquo;Laws of Serverless&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;law-of-furthest-abstraction&#34;&gt;Law of Furthest Abstraction&lt;/h2&gt;

&lt;p&gt;The &amp;ldquo;Law of Furthest Abstraction&amp;rdquo; says that you have no knowledge of the underlying system where your code runs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/law-furthest-abstraction.png&#34; alt=&#34;A clipart picture of a person with the top of their head open to receive knowledge.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is different from a PaaS. A PaaS hides the operating system, but you still need to know about the runtime and you still need to have some system knowledge.&lt;/p&gt;

&lt;p&gt;For instance, Azure&amp;rsquo;s PaaS is called &amp;ldquo;&lt;a href=&#34;https://azure.microsoft.com/try/app-service/?WT.mc_id=personal-blog-buhollan&#34;&gt;App Service&lt;/a&gt;&amp;rdquo;. When you create an App Service instance, you need to tell it what sort of App Service Plan you want to use. That service plan defines how much memory and CPU your instance will receive. For instance, here&amp;rsquo;s what the B (Basic) tier App Service Plans look like&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/b-service-plans.png&#34; alt=&#34;A listing of B tier service plans and resources granted with each one&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This means App Service is not Serverless.&lt;/p&gt;

&lt;p&gt;A service in Azure that &lt;strong&gt;is&lt;/strong&gt; Serverless would be &lt;a href=&#34;https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-vs-code?WT.mc_id=personal-blog-buhollan&#34;&gt;Azure Functions&lt;/a&gt;. Azure Functions has no concept of App Service Plans. You run your code in Azure Functions and it will receive all the computing power that it needs when it needs it. It&amp;rsquo;s up to Azure Functions to figure that out.&lt;/p&gt;

&lt;p&gt;How does that even work?!?&lt;/p&gt;

&lt;p&gt;It works becdause of the second law of Serverless: The Law of Inherent Scale.&lt;/p&gt;

&lt;h2 id=&#34;the-law-of-inherent-scale&#34;&gt;The Law of Inherent Scale&lt;/h2&gt;

&lt;p&gt;The Law of Inherent Scale says that scaling is an intrinsic attribute of the technology; so much so that it just happens automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/law-inherent-scale.png&#34; alt=&#34;An icon of a column chart getting larger as it goes to the right and an arrow following along the top of the columns&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With Azure Functions, scaling just occurs. And remember, scaling is both out and back. It&amp;rsquo;s not enough to be able to scale out, the service needs to also be able to scale back; &lt;strong&gt;all the way to zero&lt;/strong&gt;. That last part is important as you&amp;rsquo;ll see when we get to the third and final law.&lt;/p&gt;

&lt;p&gt;The way that Azure Functions accomplishes this is by adding servers as your demand spikes, and removing them as the demand subsides. This includes putting your app back on cold disk if it hasn&amp;rsquo;t been called for a period of time. It then has to rehydrate the application when the next invocation occurs.&lt;/p&gt;

&lt;p&gt;You can actually watch this happen in realtime by simulating some load on an Azure Functions instance. Watch the GIF below and you can see the number of servers increase as the CPU gets pegged.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/function-scaling-demo.gif&#34; alt=&#34;Azure App Insights showing increased traffic and the number of servers increasing as load on the server reaches 100%&#34; /&gt;.&lt;/p&gt;

&lt;p&gt;What about a PaaS though? Don&amp;rsquo;t most PaaS&amp;rsquo;s scale?&lt;/p&gt;

&lt;p&gt;Yes, They do.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at Azure App Service again as an example. App Service can scale out in one of two ways. One way is for you to manually add another App Service instance (B tier for example). This would not be considered &amp;ldquo;inherent scale&amp;rdquo; since it does not happen automatically.&lt;/p&gt;

&lt;p&gt;The second way is something called &amp;ldquo;Auto scaling&amp;rdquo;. This is where Azure will automatically add new App Service instances for you as the load increases. That &lt;strong&gt;is&lt;/strong&gt; inherent scale. However, you have to scale in chunks - or rather by adding full App Service Plan instances. In other words, you have to add another full B instance to scale out, even if you don&amp;rsquo;t need the entire amount of that compute. This means that you are paying for compute whether you use it or not. This brings us to the third and final Serverless Law - the &amp;ldquo;Law of Least Consumption&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;law-of-least-consumption&#34;&gt;Law of Least Consumption&lt;/h2&gt;

&lt;p&gt;The Law of Least Consumption says that you only pay for what you use. Coincidentally, this also everyone&amp;rsquo;s most favorite law. Money talks. But it doesn&amp;rsquo;t buy happiness. But it does buy jetski&amp;rsquo;s and I&amp;rsquo;ve never seen an unhappy person on a jetski.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/law-least-consumption.png&#34; alt=&#34;An icon of a water faucet with the water running&#34; /&gt;.&lt;/p&gt;

&lt;p&gt;Think about it like this: in your house, or your parents house, or apartment or wherever you happen to live, you probably have running water. But that water doesn&amp;rsquo;t run all the time. It only runs when you need it. You turn the faucet on to get water, and off when you aren&amp;rsquo;t using it. By the way, you can now get a faucet that is &lt;a href=&#34;https://www.cnet.com/news/delta-to-make-faucets-that-work-with-amazon-alexa/&#34;&gt;controlled by Alexa&lt;/a&gt;. Which is just what we need - robots in charge of the water supply.&lt;/p&gt;

&lt;p&gt;Azure Functions is like a water faucet for compute. You only get charged for what you use. That occurs in a few different ways&amp;hellip;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Code storage&lt;/strong&gt; - you pay for the disk space that your code actually occupies on the server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Executions&lt;/strong&gt; - you pay per execution of your function&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execution time&lt;/strong&gt; - you pay for the amount of compute that your function uses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You also receive 1 million free executions a month. That combined with the miniscule cost of storage means that if your Azure Functions don&amp;rsquo;t get called, you don&amp;rsquo;t pay anything. This makes a lot of a sense as a customer. Just think of all the compute that we have paid for and wasted all these years! You could be retired already! But probably not because you&amp;rsquo;d blow all that extra money on jetski&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;The cloud can (and should) save us money by being able to target compute by need and not just allocating it in &amp;ldquo;use it or lose it&amp;rdquo; buckets.&lt;/p&gt;

&lt;h2 id=&#34;applying-the-serverless-laws&#34;&gt;Applying the Serverless Laws&lt;/h2&gt;

&lt;p&gt;Now that I have established an irrefutable framework to determine if something is Serverless, we can apply these laws to any technology to determine if it is or is NOT Serverless.&lt;/p&gt;

&lt;h3 id=&#34;azure-services-that-are-serverless&#34;&gt;Azure Services that are Serverless&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/javascript/tutorial-vscode-static-website-node-01&#34;&gt;Azure Static Sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/free/serverless/?WT.mc_id=personal-blog-buhollan&#34;&gt;Logic Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/introduction?WT.mc_id=personal-blog-buhollan&#34;&gt;Cosmos DB&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Note - Cosmos DB isn&amp;rsquo;t quite Serverless just yet, but it&amp;rsquo;s close. It conforms to law 1, but up until recently, you&amp;rsquo;ve had to buy database bandwidth in chunks which means it did not conform to laws 2 and 3. However, as of Ignite, the team announced &amp;ldquo;Auto Pilot&amp;rdquo;. This is a feature which automatically adds throughput as the load requires it, but you still have to pay for a basic allocation. Once Cosmos DB allows you to start from absolute zero, it will comply with all 3 laws and can be considered &amp;ldquo;Serverless&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/sql-database/sql-database-serverless?WT.mc_id=personal-blog-buhollan&#34;&gt;SQL Server&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Believe it or not, SQL Server has a &amp;ldquo;Serverless&amp;rdquo; offering.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next time someone casually throws out a &amp;ldquo;Serverless&amp;rdquo;, see if satisfies the 3 Laws of Serverless. If it does, you can save yourself a &amp;ldquo;well, actually&amp;rdquo;. If it doesn&amp;rsquo;t, just nod and smile. And try to pay attention to the Venn Diagram.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>GSAP, Webpack and invalid tweens</title>
<link>https://burkeholland.github.io/posts/invalid-tween/</link>
<pubDate>Wed, 27 Nov 2019 10:51:28 -0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/invalid-tween/</guid>
<description>&lt;p&gt;Before I forget, I wanted to document for posterity how I lost about 4 hours yesterday to gsap/webpack issue.&lt;/p&gt;

&lt;p&gt;I was working on a Vue project (CLI) with some gsap powered animations that I did not write. Not having written them, I can confess that I have no idea what they are or what they do. Any time I see the word &amp;ldquo;Tween&amp;rdquo;, I get flashbacks to actual &lt;em&gt;Flash&lt;/em&gt; timelines and this very visceral feeling that I do not know, nor will I ever, know what I&amp;rsquo;m doing.&lt;/p&gt;

&lt;p&gt;The application ran fine in development mode. But when I built the thing (&lt;code&gt;npm run build&lt;/code&gt;) and deployed it, none of the animations worked. Because why would something ever work on your machine AND when you deploy it? That wouldn&amp;rsquo;t be software development at all. That would be cooking. Or carpentry. But the first rule of software development is that it only works for you. This is either because software is hard, or because god hates you.&lt;/p&gt;

&lt;p&gt;Either way, here&amp;rsquo;s the error you googled for&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Invalid visibility tween of visible Missing plugin? gsap.registerPlugin()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First off, is it just me or is this error message missing some punctuation? Should there be a period after &amp;ldquo;visible&amp;rdquo;? Also, &amp;ldquo;invalid visibility tween of visible&amp;rdquo;? That&amp;rsquo;s the most circular 5 words I have ever read. Even now I&amp;rsquo;m not quite sure what they are trying to say in this error. The last part is kind of helpful - &lt;code&gt;gsap.registerPlugin()&lt;/code&gt;. OK, so it thinks I need to register a plugin to change the visibility of things. Except that there is no plugin in gsap to do that. Like I said, I have no idea what I&amp;rsquo;m doing, but if the line to animate the visibility looks like this..&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mounted() {
    TweenMax.set(&amp;quot;#thisisfine&amp;quot;, {
      visibility: &amp;quot;visible&amp;quot;
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where, exactly, is the visibility plugin? And isn&amp;rsquo;t that something that gsap should just do in it&amp;rsquo;s base library? If TweenMax can&amp;rsquo;t change the visibility of something without a plugin, what good is it for?&lt;/p&gt;

&lt;p&gt;This one really stumped me. I noticed that not only visibility, but every single animation in the app was broken. All kinds of errors, all of them roughly the same&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Invalid filter tween of none Missing plugin? gsap.registerPlugin()
Invalid fill tween of hsl(+=0%, -=100%, +=0%) Missing plugin? gsap.registerPlugin()
Invalid y tween of -28 Missing plugin? gsap.registerPlugin()
Invalid rotation tween of 10 Missing plugin? gsap.registerPlugin()
Invalid transformOrigin tween of 50% 50% Missing plugin? gsap.registerPlugin()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, all of this works in development.&lt;/p&gt;

&lt;p&gt;I did a lot of Googling on this issue and read a lot of forum posts I didn&amp;rsquo;t understand. What&amp;rsquo;s relatively clear here is that somehow, in a production build, Webpack is not including all of the necessary parts of gsap to make this work. It includes them in the development bundle, but not the production one.&lt;/p&gt;

&lt;p&gt;I eventually found &lt;a href=&#34;https://greensock.com/forums/topic/21298-premium-plugins-vue-npm-run-build/&#34;&gt;this forum post&lt;/a&gt; on the gsap forums about Webpack shaking gsap plugins out during the tree-shaking part of the build process. This happens if you aren&amp;rsquo;t referencing the plugins anywhere in your code. The suggested fix is to explicitly include the plugin in your code so that Webpack knows that you are in fact going to use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import MorphSVGPlugin from &amp;quot;gsap/src/uncompressed/plugins/MorphSVGPlugin&amp;quot;;

// You need to reference the plugin somewhere in your code
const plugins = [MorphSVGPlugin];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But as we already saw, I don&amp;rsquo;t have that problem. The code I&amp;rsquo;m working with is importing &lt;code&gt;TweenMax&lt;/code&gt; and using &lt;code&gt;TweenMax&lt;/code&gt;. WebPack should be including that. If we look a the import for gsap, you can see that VS Code does see a &amp;ldquo;visibility&amp;rdquo; property on the gsap import.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://burkeholland.github.io/media/vs-code-gsap.png&#34; alt=&#34;visibility property on gsap object in VS Code&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On a hunch, I imported &lt;code&gt;visibility&lt;/code&gt; and then included it as per the forum post.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { TimelineMax, TweenMax, Circ, visibility } from &amp;quot;gsap&amp;quot;;
const plugins = [visibility];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, SUCCESS! But not just for the visibility animation, for ALL of them. All of the animations now work.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure why this is. It&amp;rsquo;s like whatever code allows gsap to animate visibility allows it to do everything else. So including that one property includes what we actually want, which is a functioning gsap.&lt;/p&gt;

&lt;p&gt;In any event, hopefully this post is a quick Google search away and you didn&amp;rsquo;t have to spend 4 hours on it like I did.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Selecting the first item from an array</title>
<link>https://burkeholland.github.io/posts/select-one-javascript/</link>
<pubDate>Sun, 17 Nov 2019 05:27:23 +0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/select-one-javascript/</guid>
<description>

&lt;p&gt;Sometimes, in life, you just want one of something. Not two. Never two. Just one. Like a toothbrush. Or a flu shot. Or a pug. Dear god, trust me, you do not want more than one pug. It&amp;rsquo;s like a choir of snoring with flatulance on backup vocals.&lt;/p&gt;

&lt;p&gt;This is common in database queries, too. I mean, the desire to just get one result. Not the flatulance. Although it &lt;em&gt;might&lt;/em&gt; be. I&amp;rsquo;ve got no data on that and writing queries can be super stressful.&lt;/p&gt;

&lt;p&gt;Applications that act as a form over some sort of data often require the retreiving of just one item so that you can edit that item. Which, according to science, is like 110% of all applications ever.&lt;/p&gt;

&lt;p&gt;I recently built a small application with &lt;a href=&#34;https://www.npmjs.com/package/@azure/cosmos&#34;&gt;Cosmos DB&lt;/a&gt;, and I quickly ran into a situation where I needed to select one item. Specifically, I have a database structure that looks like this…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    productId: 1,
    productName: &amp;quot;Hammer&amp;quot;,
    productDescription: &amp;quot;a tool consisting of a weighted \&amp;quot;head\&amp;quot; fixed to a long handle that is swung to deliver a swift and brutal impact to the thumb.&amp;quot;
    brand: {
        brandId: 10,
        brandName: &amp;quot;Acme&amp;quot;,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we wanted to get just the Acme thumb smash…..er…..hammer, then we could write a select statement that looks like the following…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT *
FROM products p
WHERE p.name = &amp;quot;Hammer&amp;quot; AND p.brand.name = &amp;quot;Acme&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Executing this query in Cosmos DB looks something like this…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;async function getProduct(productName: string, brandName: string) {
  const query = `SELECT TOP 1 *
               FROM products p
               WHERE p.productName = &amp;quot;${productName}&amp;quot;
               AND p.brand.brandName = &amp;quot;${brandName}&amp;quot;`;
  const result = await collection.items.query(query).fetchNext();
  return result.resources[0];
}

getProduct(&amp;quot;Hammer&amp;quot;, &amp;quot;Acme&amp;quot;).then(product =&amp;gt; {
  console.log(JSON.stringify(product));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that “SELECT Top 1 _” is preferred over “SELECT _&amp;rdquo; so you don’t return more data than you intend. And &amp;ldquo;SELECT p.ANYTHING_AT_ALL&amp;rdquo; is preferrable to &amp;ldquo;SELECT *&amp;rdquo; because your document structure may not always be the same in a NoSQL database because that&amp;rsquo;s the world we live in now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assuming that the brand name and product name together constitute a unique key, we should only ever get one result back. The Cosmos DB JavaScript SDK always returns an array for queries, even if there is only one item inside. To get that item, we can just grab the zero-index item from the &lt;code&gt;resources&lt;/code&gt; object, which is what’s going on in that gorgeous code block above composed by yours truly.&lt;/p&gt;

&lt;p&gt;The problem is that this returns &lt;code&gt;undefined&lt;/code&gt; if there is no result. We could check for that and return en empty object easily enough…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return result.resources[0] || {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But…&amp;rdquo;yuck”. I don&amp;rsquo;t know what it is about array notation, but it always feels like I&amp;rsquo;m doing it wrong. Like I’m cheating by using the array index. I think this is because I’m explicitly asking for something that, much like god, may or may not exist. If it does exist, everything is fine. If it doesn&amp;rsquo;t, the only way to find out is the hard way.&lt;/p&gt;

&lt;p&gt;Array notation isn’t bad per say, but I generally try and stay away from it because it’s the best way to smash your face on “undefined is not a function” if you use it with objects.&lt;/p&gt;

&lt;p&gt;To feel less dirty, we could instead use the array “shift” method. This gives us the first object in the array or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return result.resources.shift() || {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that also alters the original array, which we might not want. Like if we were going to use that same response again for another operation. I know you think you won&amp;rsquo;t. You always think you won&amp;rsquo;t. But then, eventually, you do and by the time you do you&amp;rsquo;ve forgotten all about this whole scenario because at least a year has passed, you&amp;rsquo;ve had a child, you&amp;rsquo;ve moved twice because you don&amp;rsquo;t get along with your neighbors and your wife has acquired two pugs.&lt;/p&gt;

&lt;p&gt;It’s generally not a good idea to go around modifying collections unless you specifically want to do that. Insert esoteric HN article about immutability.&lt;/p&gt;

&lt;p&gt;Instead we could use &lt;code&gt;find&lt;/code&gt;, which will leave the original &lt;code&gt;resources&lt;/code&gt; array intact…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return result.resources.find(x =&amp;gt; x) || {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cosmos DB enginner and JavaScript trickster &lt;a href=&#34;https://twitter.com/southpolesteve&#34;&gt;Steve Faulkner&lt;/a&gt; pointed out that you could also just destructure the array. But we can’t do that in a return statement for reasons that the JavaScript gods have not seen fit to reveal. So we would need two lines. Also, we can’t do a default value on the destructuring, so we would have to do it on the return.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const [item] = result.resources;
return item || {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;He also pointed out to me that the common denominator in all my failed neighbor relationships might be me.&lt;/p&gt;

&lt;p&gt;At this point, we just have to ask, “Which of these is best”? We don&amp;rsquo;t have to ask that, but we probably should given this is a blog post and it needs a conclusion.&lt;/p&gt;

&lt;p&gt;In my opinion, as much as I hate to admit it, it’s the line we started with. While array notation might seem dirty, in this instance, it simply makes the most sense and most clearly articulates what the code does.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return result.resources[0] || {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s also not a problem to use array notation here because we are in fact working with an array. The whole reason I was trying to avoid that situation in the first place is because I was looking for a solution to a problem that JavaScript just doesn&amp;rsquo;t have.&lt;/p&gt;

&lt;h2 id=&#34;a-solution-without-a-problem&#34;&gt;A solution without a problem&lt;/h2&gt;

&lt;p&gt;If you have used C# before, you will be familiar with LINQ. You will also be very familiar with LINQ&amp;rsquo;s &lt;code&gt;firstOrDefault&lt;/code&gt; or &lt;code&gt;singleOrDefault&lt;/code&gt; methods. These methods return either the first result from the query, or an empty object of the query return type. LINQ doesn&amp;rsquo;t exist for JavaScript (that&amp;rsquo;s a &lt;a href=&#34;https://github.com/mihaifm/linq&#34;&gt;lie&lt;/a&gt;) and there is a reason for that: We don&amp;rsquo;t need it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;firstOrDefault&lt;/code&gt; and &lt;code&gt;singleOrDefault&lt;/code&gt; methods are needed for C# because it is a typed language. You can&amp;rsquo;t just return an object. You either have to get a result, or you need to get a null object of a certain type. In JavaScript, we don&amp;rsquo;t care about types (very much). So it&amp;rsquo;s easy enough for us to check and see if something is simply there and then return an empty object if it is not. We don&amp;rsquo;t even have to do that much. We can just use the result type later in our code if it&amp;rsquo;s defined at all.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const product = await db.getProduct(&amp;quot;Hammer&amp;quot;, &amp;quot;Acme&amp;quot;);
if (product) {
  product.description = ...
}
else {
  console.log(&amp;quot;Unable to find a(n) %s %s&amp;quot;, &amp;quot;Acme&amp;quot;, &amp;quot;Hammer&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The moral of this story is that sometimes your first instinct is the right one. Or, it&amp;rsquo;s not. Either way, you won&amp;rsquo;t know until you write a blog post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/cosmos-db/create-sql-api-nodejs&#34;&gt;Connect to and query data from Azure Cosmos DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ardalis.com/javascript-es6-linq-equivalents&#34;&gt;Nifty article from Steve Smith on mapping JavaScript array methods to LINQ methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Deploying a Nuxt app to Azure</title>
<link>https://burkeholland.github.io/posts/thank-u-nuxt/</link>
<pubDate>Wed, 05 Jun 2019 19:21:49 -0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/thank-u-nuxt/</guid>
<description>

&lt;p&gt;&lt;summary&gt;
Summary: Nuxt apps with &amp;ldquo;server-side rendering&amp;rdquo; require a Node server, so you need to deploy them to Azure App Service. If you are using Nuxt apps in SPA mode, you can (and should) deploy them to Azure Storage.&lt;/p&gt;

&lt;p&gt;Check out the links below for more details&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img class=&#34;azure-icon&#34; src=&#34;https://burkeholland.github.io/media/Icon-compute-35-App-Services.svg&#34;&gt;&lt;a href=&#34;https://code.visualstudio.com/tutorials/app-service-extension/getting-started?WT.mc_id=personal-blog-buhollan&#34;&gt;Deploy to Azure App Service&lt;/a&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img class=&#34;azure-icon&#34; src=&#34;https://burkeholland.github.io/media/Icon-storage-86-Storage-Accounts.svg&#34;&gt;&lt;a href=&#34;https://code.visualstudio.com/tutorials/static-website/getting-started?WT.mc_id=personal-blog-buhollan&#34;&gt;Deploy a static website to Azure&lt;/a&gt;&lt;/figure&gt;
&lt;/summary&gt;&lt;/p&gt;

&lt;p&gt;Ariana Grande once said, &amp;ldquo;One taught me patience. And one taught me pain&amp;rdquo;. She was talking about her ex&amp;rsquo;s. I&amp;rsquo;m here today to talk to you about Nuxt&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Nuxt&amp;rsquo;s? Nuxt&amp;rsquo;is? Nuxt&amp;rsquo;ises?&lt;/p&gt;

&lt;h2 id=&#34;what-is-nuxt-anyway&#34;&gt;What is Nuxt anyway?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://nuxtjs.org/&#34;&gt;Nuxt&lt;/a&gt; is &amp;ldquo;the VueJS framework&amp;rdquo;. That&amp;rsquo;s what it says on their website and why would they lie.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s kinda hard to nail down exactly what Nuxt does, because it does so much. It will automatically setup routing based on your folder structure. It will automatically do code splitting for static sites. It will automatically cause someone to write a blog post with a few too many uses of the word &amp;ldquo;automatically:&amp;ldquo;.&lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s probably best known as the way that you do server-side rendering with Vue.&lt;/p&gt;

&lt;h2 id=&#34;server-side-vue&#34;&gt;Server-side Vue&lt;/h2&gt;

&lt;p&gt;Vue is a JavaScript framework. Which means that the code you write is executed in the browser at runtime. But a few years ago, someone smart realized that we can execute JavaScript on the server with Node, so we should be able to run and compile JavaScript frameworks on the server. And they called it, &amp;ldquo;Isomorphic JavaScript&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I still don&amp;rsquo;t know what that means. Fortunately, it was renamed to &amp;ldquo;Universal JavaScript&amp;rdquo;. Vue&amp;rsquo;s primary value proposition is that it enables developers to build these &amp;ldquo;Universal Applications&amp;rdquo;. It does a lot more than that, but that&amp;rsquo;s primarily what it&amp;rsquo;s known for. Kind of like John Krasinski is Jack Ryan, but in a much more real sense, he is and always will be &lt;a href=&#34;https://en.wikipedia.org/wiki/Jim_Halpert&#34;&gt;Jim Halpert&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s hard to understand Universal JavaScript without seeing something in action, so let&amp;rsquo;s build something pointless.&lt;/p&gt;

&lt;h2 id=&#34;a-pointless-demo&#34;&gt;A pointless demo&lt;/h2&gt;

&lt;p&gt;My sample app is a single page with one XMLHTTPRequest (XHR) which pulls some fake images in from the JSON placeholder API. I was expecting better fake images than this, but I suppose you can&amp;rsquo;t complain about free. Like when my sister-in-law rented a margarita machine and then made them too weak. &amp;ldquo;Listen, thanks for the free alcohol, but I am disappointed.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1600/0*7gaMmL0HlfVX9vZf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the entirety of the code used to make this page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;is-size-1&amp;quot;&amp;gt;Photos&amp;lt;/h1&amp;gt;
    &amp;lt;div class=&amp;quot;columns is-multiline&amp;quot;&amp;gt;
      &amp;lt;div
        v-for=&amp;quot;photo in photos&amp;quot;
        :key=&amp;quot;photo.id&amp;quot;
        class=&amp;quot;column is-one-quarter&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;card photo&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;card-image&amp;quot;&amp;gt;
            &amp;lt;figure class=&amp;quot;image&amp;quot;&amp;gt;
              &amp;lt;img :src=&amp;quot;photo.url&amp;quot; alt=&amp;quot;photo.title&amp;quot; /&amp;gt;
            &amp;lt;/figure&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class=&amp;quot;card-content&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
              &amp;lt;p&amp;gt;{{ photo.title }}&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {
  async asyncData({ $axios }) {
    const { data } = await $axios.get(
      &#39;https://jsonplaceholder.typicode.com/photos?_limit=100&#39;
    )
    return { photos: data }
  }
}
&amp;lt;/script&amp;gt;
&amp;lt;style&amp;gt;
.card.photo {
  height: 100%;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not super exciting, but enough to test out Nuxt&amp;rsquo;s value proposition of rendering apps on the server. On line 29 there is an HTTP call to the endpoint made with axios. Even though this code is in the component, Nuxt is going to make that call and compile this template on the server. So the page we get will already have all of the markup in it.&lt;/p&gt;

&lt;p&gt;But how do we know for sure that Nuxt is actually doing this? What if it&amp;rsquo;s just lying to us? How can I ever trust anyone again after &lt;a href=&#34;https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/&#34;&gt;left-pad&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;The easiest way is to just right-click the page and &amp;ldquo;View Source&amp;rdquo;. View Source shows you what the page looks like when it was requested from the server. That is before any JavaScript has a chance to mutilate it. I mean mutate it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2784/0*quP9zI62tcajdDpr.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Yep - all of the markup is definitely there. And it ain&amp;rsquo;t pretty either. But that&amp;rsquo;s OK because it&amp;rsquo;s minified or something. And smaller is always better on the web. &lt;a href=&#34;https://css-tricks.com/how-to-increase-your-page-size-by-1500-with-webpack-and-vue/&#34;&gt;OR IS IT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also open the dev tools and just look for an XHR. It will be conspicuously absent.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2784/0*FVNiYW--Kj67z5PS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t have too much trouble getting this far. Nuxt is….different than a standard Vue application, but it&amp;rsquo;s not a brick to teeth. It&amp;rsquo;s relatively easy to just scaffold out a new app and then read the first paragraph of the &amp;ldquo;Getting Started&amp;rdquo; page and assume that you know everything already.&lt;/p&gt;

&lt;p&gt;Then I went to deploy it.&lt;/p&gt;

&lt;h2 id=&#34;deploying-nuxt-apps&#34;&gt;Deploying Nuxt apps&lt;/h2&gt;

&lt;p&gt;Since Nuxt is rendering things on the server, Nuxt apps require a server. A node server to put too fine a point on it. I&amp;rsquo;m using Azure, so that means &lt;a href=&#34;https://code.visualstudio.com/tutorials/app-service-extension/getting-started?WT.mc_id=personal-blog-buhollan&#34;&gt;AppService&lt;/a&gt;. Vue apps that are single-page applications can be hosted on &lt;a href=&#34;https://code.visualstudio.com/tutorials/static-website/getting-started?WT.mc_id=personal-blog-buhollan&#34;&gt;Azure Storage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before the app can be run, it has to be built. Ideally, we want this to happen on the server. The preferred workflow is…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make a change&lt;/li&gt;
&lt;li&gt;Check into Github&lt;/li&gt;
&lt;li&gt;Azure pulls in code automatically&lt;/li&gt;
&lt;li&gt;Azure performs build&lt;/li&gt;
&lt;li&gt;Azure starts the site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This workflow lets you focus on writing code, not deploying things. You just check them into source control and your site is magically updated. This is kind of like the simplest possible form of DevOps.&lt;/p&gt;

&lt;p&gt;To set up a workflow like this in Azure, I need to first decide if I&amp;rsquo;m more of a Windows guy, or more of a Linux guy. Azure supports both operating systems, and the one that you choose matters a whole lot. Just wait.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with Linux. It&amp;rsquo;s important that we start with Linux because Linux is the preferred way to run Node applications in Azure. I bolded that statement because it&amp;rsquo;s important. It means that the effort to improve the Node experience in Azure is focused around Linux.&lt;/p&gt;

&lt;h2 id=&#34;deploying-to-linux&#34;&gt;Deploying to Linux&lt;/h2&gt;

&lt;p&gt;Running a Nuxt application on AppService for Linux &amp;ldquo;just works&amp;rdquo; thanks to a new build tool in Azure called &amp;ldquo;Oryx&amp;rdquo;. In fact, Oryx just rolled out this month. Welcome to the world, Oryx! Sorry about 2019.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2600/0*FsNsKCMuU_6r6Tfe.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All it takes to deploy and build this thing on Azure, is to configure the site for Git or GitHub deployment and check the project into the repo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*cDgYe1sVFNHR13Zm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Oryx will pull in the code, run an npm install and then execute npm run build. The Git logs will show that a Nuxt build did occur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2600/0*ey-IoljeCrcp32l1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Browse to the site and…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2600/0*lyVy7wWpY044J3dx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It takes a LONG time for Azure to return this error and I&amp;rsquo;ve been working with Azure long enough to know that when this happens, it&amp;rsquo;s probably because Azure cannot bind to a port or address. That happens if the app is trying to bind to some hard-coded address (like localhost) or some hard-coded port (like 3000).&lt;/p&gt;

&lt;p&gt;A lot of hosting providers have this issue. This included sites on Heroku and anywhere else that uses containers to host apps like Azure does. To fix it, the Nuxt docs say to include a section in the nuxt.config.js that binds to 0.0.0.0.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server: {
  host: &#39;0.0.0.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2600/0*fFFcsLVb3AdMJJNO.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Excellent! Not too bad. The host setting is really the only thing that might trip you up here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus tip&lt;/strong&gt;: you can speed up the whole build process quite a bit by using yarn instead of npm. Azure caches the top yarn modules so yarn install is going to be enormously faster than npm install.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s Linux. Now let&amp;rsquo;s talk about Windows.&lt;/p&gt;

&lt;h2 id=&#34;deploying-to-windows&#34;&gt;Deploying To Windows&lt;/h2&gt;

&lt;p&gt;Deploying to Windows is quite a bit more….interesting. There is no Oryx build tool for Windows. Instead, you get something called &amp;ldquo;Kudu&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;By default, Kudu doesn&amp;rsquo;t build anything. You have to include a .deployment file with the right setting to get it to perform a build. That just happens to be the SCM_DO_BUILD_DURING_DEPLOYMENT setting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[config]
SCM_DO_BUILD_DURING_DEPLOYMENT=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem is that your definition of a build and Kudu&amp;rsquo;s definition of a build are probably not the same. When I say build, I mean npm install and then npm run build. Kudu&amp;rsquo;s definition stops at npm install. But since Kudu is already running an npm install, we can trick it into also running the build command by just making it a postinstall hook.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;postinstall&amp;quot;: &amp;quot;npm run build&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works! Wait. Kind of.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*9ySqMlUopJGE9oJI.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well, it worked in so much as Kudu did run the postinstall hook, but the build fails. And it fails because function is an unexpected token. Anytime you see &amp;ldquo;unexpected token&amp;rdquo; as an error, the problem is likely because your Node version is wrong. I scrolled back up through the logs and saw this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*_uED5o2xWwhIL83N.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My guess is Node 6.9.1 doesn&amp;rsquo;t support async functions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*whhi1gg9RW2I-iHd.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nope. Looks like version 7.10.1 is the minimum for that. To stay safe, let&amp;rsquo;s choose the highest supported version of Node in Azure, which at the time of this writing, is 10.15.2. The most reliable way to set the &lt;code&gt;WEBSITE_DEFAULT_NODE_VERSION&lt;/code&gt; in Azure is to do it via an App Setting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*Pnf75E2ErbA9rKCX.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;SUCCESS!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*OMHwK7RnSCs6BRO0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;ll just browse to the site….&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*omyORxUG6LZq6tI3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s the word when something should work, but it doesn&amp;rsquo;t work and you don&amp;rsquo;t know why? Oh yeah, &amp;ldquo;programming&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Scrolling back up through the output reveals this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*CW88bWnlqBMRU3wQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well, it&amp;rsquo;s not an invalid startup command, but Kudu is expecting something in the format of node entry-point. There is an interesting line below that one that says…&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Missing server.js/app.js files, web.config is not generated&amp;rdquo;&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s happening here is Windows uses IISNode to run the application. IISNode requires a web.config to set the entry point and root directory. If you have an app.js or serverjs file in the root of your app, Kudu will use that file to automatically generate a web.config.&lt;/p&gt;

&lt;p&gt;So I added a server.js file to the root of my project that just required in my actual startup file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(&#39;./server/index.js&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Redeploy and…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/0*bWHIKki05mhHVZXV.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Not terrible, but not terribly intuitive either. You don&amp;rsquo;t know what you don&amp;rsquo;t know. And if you didn&amp;rsquo;t know, now you know.&lt;/p&gt;

&lt;h2 id=&#34;look-what-you-taught-me&#34;&gt;Look what you taught me&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll be honest, figuring out the Windows part of this thing was no fun. Patience and pain. That said, I do feel like I understand Azure AppService for Windows way more than I ever thought that I would. At least enough to write a blog post.&lt;/p&gt;

&lt;p&gt;Oryx is new, and it&amp;rsquo;s a much-welcomed improvement. It works the way that I would expect it to, which is kinda all we&amp;rsquo;re really asking for as developers. It&amp;rsquo;s like the Dyson guy used to say…&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;div&gt;I just think that things should work&lt;/div&gt;
&lt;cite&gt;-The Dyson Vacuum Cleaner Guy&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/burkeholland/nuxt-appservice-windows&#34;&gt;Sample application from this article&lt;/a&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>This is how to easily deploy a static site to Azure</title>
<link>https://burkeholland.github.io/posts/static-site-azure/</link>
<pubDate>Thu, 30 May 2019 06:48:24 -0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/static-site-azure/</guid>
<description>

&lt;p&gt;Over the weekend I bought my first new vehicle ever: A red moped. That was the only thing available at my price point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1000/1*igNXrT_-JvgxJSeJ745Owg.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What a glorious thing it is! The wind whips over your body at a stunning 35 mph and you are alone with your thoughts. You ponder the finer points of the universe: existential questions like, “Do I look stupid on this thing”, “How many bugs can you eat before you die” and “How many ways can I deploy a static site to Azure”?&lt;/p&gt;

&lt;h2 id=&#34;what-s-a-static-site-moped-boy&#34;&gt;What’s a static site, moped boy?&lt;/h2&gt;

&lt;p&gt;Good question. But can we not call me “moped boy”? I mean it’s got 150 CC’s. I can do like 55. Downhill with the wind.&lt;/p&gt;

&lt;p&gt;Frameworks like PHP, ASP.NET and Django assemble pages on the fly. When a site is requested, the server performs some queries or operations, assembles the markup and sends a “page” back to you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/600/1*69aS6OhjDU3RBeSRqXiaFA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A “static site”, is any site that is not using a server-side framework. It is just HTML, CSS and JavaScript. These days most static sites are some form of single page application built with Angular, React or Vue (alphabetical order, breathe deeply). I think I’m supposed to include Svelte in that list now too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/600/1*sar590LUigydRl6LkIqU7Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I’m not sure why I drew my servers in such a bad mood. I think it’s because that’s how I would feel if I was a server. Thankless job. Nobody cares until you go down and then everyone is mad you.&lt;/p&gt;

&lt;p&gt;“So this article is about how to host an index.html file? Really?”.&lt;/p&gt;

&lt;p&gt;NO. I mean, kind of. Actually, yes.&lt;/p&gt;

&lt;h2 id=&#34;azure-storage&#34;&gt;Azure Storage&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website?WT.mc_id=personal-medium-buhollan&#34;&gt;Azure Storage&lt;/a&gt; is specifically designed to serve files as quickly as possible. Static sites are just files. And because God loves you and wants you to be happy, there is VS Code. And because Microsoft loves you, there is an &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestorage&amp;amp;WT.mc_id=personal-medium-buhollan&#34;&gt;Azure Storage extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once it’s installed, you create a storage account. That’s pretty straightforward and quick. Short enough to fit in this GIF.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1280/1*Py8u-X-STzMXvL_YKOE1Iw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/jeffhollan&#34;&gt;Jeff Hollan&lt;/a&gt; from the Azure Functions team had a cool tweet the other day about naming temporary Resource Groups with “deleteme” and then having a PowerShell function that deletes them every day. This way you can play around and not end up with a bill you weren’t expecting.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;When I create a quick demo or repro I preface my resource groups with &amp;quot;deleteme&amp;quot; - but sometimes forget to clean them up. Just wrote a quick PowerShell &lt;a href=&#34;https://twitter.com/AzureFunctions?ref_src=twsrc%5Etfw&#34;&gt;@AzureFunctions&lt;/a&gt; that does it automatically for me every night!  Took about 10 minutes and 10 lines 🎉 &lt;a href=&#34;https://t.co/WtJDwgQjcm&#34;&gt;pic.twitter.com/WtJDwgQjcm&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jeff Hollan (@jeffhollan) &lt;a href=&#34;https://twitter.com/jeffhollan/status/1132774507821748224?ref_src=twsrc%5Etfw&#34;&gt;May 26, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The account will get created and show up in the sidebar under the Storage Extension.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/1*6IXOSL6kZcJ3GMizLC3u7g.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Azure Storage is for serving files, so we need to tell it that we want it to serve our files like a web server. To do that, open the Command Palette and select “Configure static website”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1280/1*OB5z_9Wv3mgy2XMrkN76dw.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It asks what the “index.html” page is. That’s usually just “index.html”. Then it asks for a 404 page. Since we have a single page application, we’re going to direct all traffic back to the “index.html” page and handle routing ourselves.&lt;/p&gt;

&lt;p&gt;Now we just need to right-click our “dist” or “build” or whatever folder contains the build assets that Webpack made via whatever it is that Webpack does (nobody but &lt;a href=&#34;https://twitter.com/TheLarkInn&#34;&gt;Sean Larkin&lt;/a&gt; knows) and select “Deploy To Static Website”. In this case, I’m deploying a site that is written in Vue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1281/1*yGN41vTumZskHeRHOoKYpA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And that’s it. The extension will give you a prompt to browse the website. You will marvel at your own productivity and consider having pizza for a third night in a row. Go ahead. Treat yourself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1392/1*153NnRgd61tH9U4URyjCNg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Azure Storage is the preferred method for hosting a static site. Here’s why…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s Simple&lt;/li&gt;
&lt;li&gt;It’s Fast&lt;/li&gt;
&lt;li&gt;It’s Cheap — 20 cents per gig of storage per month / 8 cents per gig outbound data transfer, but you get the first 5 gigs every month free.&lt;/li&gt;
&lt;li&gt;It automatically scales&lt;/li&gt;
&lt;li&gt;IT’S SERVERLESS. I used a buzzword. You have to be convinced now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;azure-app-service&#34;&gt;Azure App Service&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/app-service/?WT.mc_id=personal-medium-buhollan&#34;&gt;App Service&lt;/a&gt; is Azure’s Platform as a Service or “PaaS”. It’s different from Storage because it provides a runtime for your server-side projects. If you had an ASP.NET application, you would run it in App Service. You can’t run it in Azure Storage because Storage doesn’t know how to run applications.&lt;/p&gt;

&lt;p&gt;You can host a static site in App Service, but because it’s designed for much more powerful server-side workflows, We need to sort of “finesse” things a bit.&lt;/p&gt;

&lt;p&gt;Kid gloves, people.&lt;/p&gt;

&lt;p&gt;I’m going to do everything via VS Code because that’s how I want to do everything in my life. I would happily take a VS Code extension for Outlook. Free startup idea right there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2416/1*Gvs5rpNLh3I6hTMApKe4PQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you set up a new App Service instance, you can choose from either Linux or Windows hosting in App Service, so I’m going to cover how to publish your static site to both. And of course, we’re going to do it all from VS Code with the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice&amp;amp;WT.mc_id=personal-medium-buhollan&#34;&gt;App Service extension&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;

&lt;p&gt;Let’s set up the new site via the VS Code extension.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2560/1*YDJJsQI1h55O-yHkZUFQ_A.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note that I selected “LTS” as my Node version. LTS on Azure means that you get whatever the highest Node version that Azure supports is. Whenever Azure supports a newer version, your project will automatically get updated.&lt;/p&gt;

&lt;p&gt;App Service for Linux does not come with a baked-in web server. So you can’t just chuck your static site in there. Azure is gonna be like, “I don’t know what you want from me”. And you’ll be like, “I want you to run this site”. And Azure will be like “I don’t know how”. And you’ll feel like nobody understands you.&lt;/p&gt;

&lt;p&gt;To fix that, we need to send a web server up with our files. A simple way to do this is to use the &lt;a href=&#34;https://www.npmjs.com/package/serve&#34;&gt;serve&lt;/a&gt; package from npm.&lt;/p&gt;

&lt;p&gt;You also need some way to tell Azure to start “serve”. You could do that by putting a second &lt;code&gt;package.json&lt;/code&gt; file in your “dist” folder. But two package JSON’s is kinda ew. Not very ew, but definitely slightly ew.&lt;/p&gt;

&lt;p&gt;Instead, we can leverage the fact that Azure bakes &lt;a href=&#34;http://pm2.keymetrics.io/&#34;&gt;pm2&lt;/a&gt; into every Node.js app in App Service. pm2 is a process manager for Node, and you can start apps with it. That means that if we include the right kind of file in our project, Azure will see it and use pm2 to start our project.
Here’s a video that explains pm2 in a bit more detail just in case you’re new to the pm2 crew.&lt;/p&gt;

&lt;p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/hYdSfH-0tVI&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The file pm2 looks for is called ecoysystem.config.js. In that file, tell pm2 to start “serve”. Passing the -s flag makes “serve” route every request it can’t find back to index.html. We want that because we have a SPA and we are handling all the routing on the client.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = {
  apps: [
    {
      script: &amp;quot;npx serve -s&amp;quot;
    }
  ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m also using &lt;code&gt;npx&lt;/code&gt; because that keeps me from having to ssh into my instance and install “serve” globally.&lt;/p&gt;

&lt;p&gt;Drop this file in the “dist” folder. Then deploy the “dist” folder to Azure. Boom — there is your static site. It took me 2 years here at Microsoft to figure out that simple solution. If Vue is your jam, I created a &lt;a href=&#34;https://github.com/burkeholland/dead-simple-vue-azure&#34;&gt;simple Github repo&lt;/a&gt; just for you.&lt;/p&gt;

&lt;p&gt;Now I realize that you probably don’t wanna right-click and deploy for the rest of your natural life, so instead of doing that, you can use App Service’s ability to build your project for you.
Building With App Service for Linux&lt;/p&gt;

&lt;p&gt;If you enable Local Git or GitHub deployment on your site and then check in, Azure will pull the code, run npm install, and then automatically run npm run build. In this case, you would want the ecosystem.config.js file to be at the root and point to the “dist” folder that gets created by the build step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = {
  apps: [
    {
      script: &amp;quot;npx serve dist -s&amp;quot;
    }
  ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your build is taking place on Azure. All you need to do is check your code into Git — Which, let’s be honest, is hard enough as it is. It’s nice that the rest of this “just works”.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that at the time of this writing, you need to choose Node 10.14.1 in order for the automatic builds to kick in. This should be fixed in LTS shortly (like in a couple of weeks) so I’m writing it that way to keep it fresh.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;

&lt;p&gt;On Windows, your site kind of just works. Kind of. This is because Windows for Node.js apps in App Service includes Internet Information Services (IIS), which is perfectly fine with serving up some static files. Here’s a Windows instance of my app where all I did was deploy the “dist” folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2784/1*tYRiq9ZPaojmrAossVw7HA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Amazing! But — there is a problem here. You can’t deep link to your app. So if you tried to go the theurlist.com/build2019 (which is a valid route), you would get this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2784/1*YNFHYjl3YdFVaoDU5lWwow.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is because IIS is looking for “theurlist.com/build2019/index.html” — which does not exist. We need to tell IIS to just route any and all traffic to “index.html”. To do that, we need to add a web.config to the “dist” folder. Inside, define a single routing rule to catch all traffic.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;system.webServer&amp;gt;
    &amp;lt;rewrite&amp;gt;
      &amp;lt;rules&amp;gt;
        &amp;lt;rule name=&amp;quot;Vue&amp;quot; stopProcessing=&amp;quot;true&amp;quot;&amp;gt;
          &amp;lt;match url=&amp;quot;.*&amp;quot; /&amp;gt;
          &amp;lt;conditions logicalGrouping=&amp;quot;MatchAll&amp;quot;&amp;gt;
            &amp;lt;add input=&amp;quot;{REQUEST_FILENAME}&amp;quot; matchType=&amp;quot;IsFile&amp;quot; negate=&amp;quot;true&amp;quot; /&amp;gt;
          &amp;lt;/conditions&amp;gt;
          &amp;lt;action type=&amp;quot;Rewrite&amp;quot; url=&amp;quot;/&amp;quot; /&amp;gt;
        &amp;lt;/rule&amp;gt;
      &amp;lt;/rules&amp;gt;
    &amp;lt;/rewrite&amp;gt;
  &amp;lt;/system.webServer&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, push the “dist” folder into Azure. Note that the automatic builds that we have on Linux do not work for Windows.&lt;/p&gt;

&lt;h3 id=&#34;azure-web-app-for-containers&#34;&gt;Azure Web App for Containers&lt;/h3&gt;

&lt;p&gt;Azure App Service actually uses containers under the covers for every site — even when you are just deploying your files. For that reason, you can also just deploy a container to App Service.&lt;/p&gt;

&lt;p&gt;Make sure you have &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; installed. Docker doesn’t work very well if it isn’t installed.&lt;/p&gt;

&lt;p&gt;Now is also a good time to tell you to….wait for it….install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker&amp;amp;WT.mc_id=ignite2019-urlist-buhollan&#34;&gt;Docker extension for VS Code&lt;/a&gt;. Come on. You knew that was coming.&lt;/p&gt;

&lt;p&gt;First, we need to add a &lt;code&gt;Dockerfile&lt;/code&gt; to our project. You can just drop that in the root.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2784/1*yvq3BMrKuf-aMG1arlvlTg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To run the site in a container, we need a web server. Since we’re on a Node kick, we’ll just keep working with “serve”.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://gist.github.com/willurd/5720255&#34;&gt;this gist&lt;/a&gt; I found that shows you a bunch of different web servers that you can get running for static sites in about one line. Any of these would work in Docker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our Docker file with “serve” looks like this…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM node:alpine

# Copy in dist

COPY ./dist /app

# Install serve

RUN npm i -g serve

# Start it up

CMD serve /app -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build it with VS Code by selecting “Docker: Build Image” from the Command Palette.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2784/1*dFnsJSaDEpvtB0ZyZ3R85A.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The image will then show up in VS Code under the “Docker” explorer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2784/1*9hyAvTUWZXs9RzYHygnStA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now push it to Docker Hub. To do that, expand the node and right-click the “latest” image and select select “tag”. You then need to enter your Docker Hub username first. The “latest” tag just means that this is the latest version of this image.
Right-click it again and select “Push”. This should push it to Docker Hub. If it fails or says “Access Denied”, make sure you are signed into Docker Hub via the terminal…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that the image is up in Docker Hub, we can pull it into Azure. We need a site to do that. We could configure that through the portal, but that’s…not very exciting, so let’s do with the &lt;a href=&#34;https://docs.microsoft.com/cli/azure/install-azure-cli?view=azure-cli-latest&amp;amp;WT.mc_id=personal-medium-buhollan&#34;&gt;Azure CLI&lt;/a&gt;. Also, this article is getting long and my fingers are tired. Your eyes are probably bleeding.&lt;/p&gt;

&lt;p&gt;Create a Resource Group…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ az group create -n deleteme-vue-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a Service Plan. Remember — this is where we choose how much resources we want from Azure. In other words, this is where you spend money.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ az appservice plan create -n vuedocker -g deleteme-vue-docker — is-linux -l “East US” — sku S1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the new instance and pull in the container from Docker Hub…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ az webapp create -n vue-docker -g deleteme-vue-docker -p vuedocker -i burkeholland/frontend-vue-typescript:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that command finishes, if you scroll back up through the CLI output, you’ll see the URL of your site…&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2784/1*Kf0GREvsy7b0Meo6bcXopA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: It’s a good idea to use a more full-featured web server in production than just “serve”. The reason for this is that “serve” is fairly simple and does not have some of the advanced features you might want in the future. This would be things like gzip or brottli compression, max worker connections, MIME type mappings and more. For that, I would recommend using &lt;a href=&#34;https://hub.docker.com/_/nginx/&#34;&gt;nginx&lt;/a&gt;. It’s not nearly as simple to setup, but it’s got all the bells and whistles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;and-done&#34;&gt;And…..DONE&lt;/h2&gt;

&lt;p&gt;Are you still with me? How many people did we lose along the way? Who died of dysentery?&lt;/p&gt;

&lt;p&gt;For those who are still awake, alert, alive and enthusiastic, let’s recap what we now know about hosting static sites in Azure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preferred: Azure Storage&lt;/li&gt;
&lt;li&gt;Azure App Service for Linux with an &lt;code&gt;ecosystem.config.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Azure App Service for Windows with a &lt;code&gt;web.config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Azure App Service with a container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choose your own destiny. Here are some additional links you might find helpful in your static site quest. Godspeed.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>The Urlist — An application study in Serverless and Azure</title>
<link>https://burkeholland.github.io/posts/the-urlist/</link>
<pubDate>Tue, 14 May 2019 09:30:34 -0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/the-urlist/</guid>
<description>

&lt;p&gt;Today we are pleased to announce that we (&lt;a href=&#34;https://twitter.com/burkeholland&#34;&gt;Burke Holland&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/cecilphillip&#34;&gt;Cecil Phillip&lt;/a&gt;) are releasing a project called “The Urlist”. You can access it starting today at &lt;a href=&#34;https://theurlist.com&#34;&gt;theurlist.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Urlist is an application that lets you create lists of url’s that you can share with others. Get it? A list of URL’s? The Urlist? Listen, naming things is hard and all the good domains are already taken.&lt;/p&gt;

&lt;p&gt;This project was born out of a realization that I was ending my presentations with a slide full of links to additional resources. That’s crazy! What exactly is the audience supposed to do with that? Take a picture with their phone and then go back and manually type it all in later? What decade is this!?&lt;/p&gt;

&lt;p&gt;What I wanted was one, easy to remember URL that would point to the full list of resources from my session. I was surprised when I found that there weren’t a lot of options out there for doing this.&lt;/p&gt;

&lt;p&gt;So I enlisted the help of my friend &lt;a href=&#34;https://twitter.com&#34;&gt;Cecil Phillip&lt;/a&gt; and over the past several months we’ve been steadily working on this project. We debuted it last week at Microsoft BUILD 2019, and today we’re making it available to everyone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*uJsveuzVwZLOsczYcaZArQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The app is pretty simple — you just start adding links that you want to group together. The app uses the Open Graph information on the site to get a title and description for your link automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*SKik0Vj9-CMTtc7rXHX0Kg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can give your list a custom url and a description. If you don’t select a custom url, it generates one for you. When you click publish, you get a URL that points directly to all of your links. That’s it! Think of it like bit.ly, but for a bunch of links.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*CQ7gPgbGiSezu8CiK9YNDQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You don’t have to log in, but if you do, you can publish and then go back and manage your lists. Otherwise, your list is created anonymously and once you publish it, it’s final. Right now we only support Twitter login.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*eY4bc_HZG8u0R4XLkkx0Tw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We had a dual motive in building this application. While we were trying to solve a problem, we were also trying to learn how to build a &lt;em&gt;truly&lt;/em&gt; serverless application on Azure. And we wanted a real-world use case — not a contrived example that served no actual purpose. That’s why this entire project is &lt;a href=&#34;https://github.com/the-urlist&#34;&gt;open source&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;frontend-vue-typescript&#34;&gt;&lt;strong&gt;Frontend: Vue + TypeScript&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The frontend is a single page app written with Vue and TypeScript. I specifically chose those two technologies because TypeScript is becoming astonishingly popular, and I wanted to see what the experience would be like with Vue.&lt;/p&gt;

&lt;p&gt;There’s a lot to unpack in that experience, but suffice to say that it was insightful.&lt;/p&gt;

&lt;p&gt;Having done it, &lt;strong&gt;I don’t think I’m sold on the value of TypeScript for a project of this size&lt;/strong&gt;. Strong typing is a tax. You pay the tax in exchange for better maintainability and tooling, but in a project of this size, there simply isn’t enough scale to justify the expense. I feel like there is an intersection between the lines of code in a project and when TypeScript becomes valuable. I just never reached that intersection in this project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2000/1*wCZlJqdnfc3i5PAgI8VZZw.png&#34; alt=&#34;It’s not a great chart — I know. I made it in PowerPoint.&#34; /&gt;&lt;em&gt;It’s not a great chart — I know. I made it in PowerPoint.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is also the issue of the extensive ecosystem of Vue components, many of which do not already have typings. That leaves you in a spot where it feels like you have to coerce TypeScript into doing things that it doesn’t want to do. You end up writing “any” and “declare” a whole lot, which is basically like screaming, “LOOK AWAY, TYPESCRIPT!”&lt;/p&gt;

&lt;p&gt;While on the subject of Vue Components, we used a few in this app that I think are just wonderful.&lt;/p&gt;

&lt;p&gt;We used the &lt;a href=&#34;https://github.com/euvl/vue-js-modal&#34;&gt;Vue Modal component&lt;/a&gt; for…..…..modals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*VF2Hl-HeLGwCoCX3yzQAiw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We used the &lt;a href=&#34;https://github.com/Jexordexan/vue-slicksort&#34;&gt;SlickSort component&lt;/a&gt; for drag and drop sorting. This component is really cool. I like it a lot and I have no idea how it works, but it works. It even works on mobile.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2540/1*zJH8SCydCDEYb9vf3_1RuQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And &lt;a href=&#34;https://vuelidate.netlify.com/&#34;&gt;Vuelidate&lt;/a&gt; for validation — including async validation that requires us to check with the API to see if a chosen url is available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2540/1*04WSOFX4HWlXEBLnmWw4ng.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The frontend is hosted on &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website-host?WT.mc_id=personal-blog-buhollan&#34;&gt;Azure Storage&lt;/a&gt;. This is partly why we call it “Serverless”. Since Vue apps compile down to just static HTML, CSS, JavaScript and Image files, we can just host it on Azure Storage.&lt;/p&gt;

&lt;p&gt;It’s “Serverless” because it scales indefinitely and we only pay for what we use. In the case of Azure Storage, we pay \$0.0184 per GB. The size of our entire dist folder — images and all is 1.8 MB.&lt;/p&gt;

&lt;p&gt;We also pay for bandwidth usage here. It costs us 8 cents per GB, but the first 5 GB every month are free. So our application has to see solid usage before we pay anything at all for bandwidth.&lt;/p&gt;

&lt;p&gt;Azure Storage is definitely the best way to host static sites. It’s got no overhead and it’s crazy fast. There is no container to startup. No Node server to run. You just…..can’t beat this type of hosting for single page apps.&lt;/p&gt;

&lt;h2 id=&#34;backend-azure-functions-dotnot-core&#34;&gt;Backend: Azure Functions + Dotnot Core&lt;/h2&gt;

&lt;p&gt;Cecil wrote the API with C# using &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-azure-function?WT.mc_id=personal-blog-buhollan&#34;&gt;Azure Functions&lt;/a&gt;. Functions is what we typically think of when someone says “serverless”. It’s the product that Microsoft positions for that market and probably falls more in line with what’s in your head when someone drops that word at a dinner party.&lt;/p&gt;

&lt;p&gt;We chose to build the API in C# because we wanted to mix and match technologies like you might out in a real-world application. We could have had a JavaScript stack through and through, but working across technologies gave us both a chance to widen our horizons.&lt;/p&gt;

&lt;p&gt;Each API endpoint has a corresponding Function. Cecil named those Functions so it’s relatively easy to figure out what they do just by looking at the names.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*hoGLgHhT9P1Qq83C8CXVtw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;He used the built-in routing capability in Azure Functions to make them RESTful endpoints. The beauty of this is that when you are working on the methods, they make sense to humans. When you are consuming them, they make sense as an API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*2LPCU4kCNBKMvQufNBv2jg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We also used the built-in authentication mechanism that Functions exposes via Azure’s AppService Authentication. We chose to do a social login only since we didn’t see a need to store usernames and passwords. On Cecil’s end, he followed the instructions in the “Authentication” section of the Azure Portal for our Functions app to set up a new application in Twitter and then copied the keys over.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*xs3xIelOxtFvy6DgccjQrQ.png&#34; alt=&#34;Relax, these aren’t our actual keys&#34; /&gt;&lt;em&gt;Relax, these aren’t our actual keys&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This lights up the /.auth endpoints in our Function app. We can now call these endpoints from our frontend and it will direct the user through the auth flow. For instance, if we want to log them in and then redirect them back to the application, we just have our “Log In” button go to this URL…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.theurlist.com/.auth/login/twitter?post_login_redirect_url=https://www.theurlist.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sends the user over to Twitter to authenticate, and then back to our application. When they come back, they now have an auth cookie attached to their session. We can see that if we look at the cookies in the dev tools.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*X3QT6vNZ5sqI4roSaofrzg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can ask for information that Twitter has on the user. These are things like username, full name, avatar — ect. We do that by calling the “me” endpoint that got lit up automatically when we turned on authentication.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://www.theurlist.com/.auth/me
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*kJ1vdPEdXAasbxgkoIvKOg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And Cecil can now validate every request I make to the API from the frontend and get the same user information. This is how we figure out what lists are yours, and whether or not you have the right to edit them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*naJSalTFtawofi9JiPf3wg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;cosmos-db-sql-api&#34;&gt;Cosmos DB + SQL API&lt;/h2&gt;

&lt;p&gt;For our data store, we used Cosmos DB and the SQL API. This allowed us to have a NoSQL data store that we could still query with SQL. I find that NoSQL is great until you need to do something beyond just a trivial query. Then everything starts to feel like chaos to me and I think of this slide from James Mickens &lt;a href=&#34;https://vimeo.com/95066828&#34;&gt;“Computers are a sadness, I am the cure”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2000/1*2bgFm8pty2RJ0uYCVVG-Dw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There’s also a nifty Cosmos DB extension for VS Code which makes it quite a bit easier to work with our documents and actually see the database.
&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-cosmosdb&amp;amp;WT.mc_id=personal-blog-buhollan&#34;&gt;&lt;strong&gt;Azure Cosmos DB - Visual Studio Marketplace&lt;/strong&gt;
*Get it now.*marketplace.visualstudio.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is just no substitute for being able to see your database when you are starting from the ground up. Being able to see it within VS Code is even better.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*VLCFBhGvhPEi_vemo46qDw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cosmos DB is one spot where our application is not, strictly speaking, serverless.&lt;/p&gt;

&lt;p&gt;Cosmos DB runs us ~25\$ per month which gets us 100 RU’s, or “Request Units per Second”. We have to buy those up front each month, and even if we don’t use all that, we still pay for it. We are also capped there, so if our application gets super popular, we have to manually scale out by reserving more RU’s.&lt;/p&gt;

&lt;h2 id=&#34;azure-front-door&#34;&gt;Azure Front Door&lt;/h2&gt;

&lt;p&gt;We use Azure Front Door to glue the frontend and the backend together. Here’s what I mean by that…&lt;/p&gt;

&lt;p&gt;Our frontend runs on Azure Storage and its URL is &lt;a href=&#34;https://theurlistdotcom.z19.web.core.windows.net/&#34;&gt;https://theurlistdotcom.z19.web.core.windows.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our backend runs on Azure Functions and its URL is &lt;a href=&#34;https://linky-link.azurewebsites.net/api&#34;&gt;https://linky-link.azurewebsites.net/api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What we wanted was to have one domain — theurlist.com. We wanted the root to point to our Vue app, and /api to point to our API.&lt;/p&gt;

&lt;p&gt;To pull this off, we used a new product called &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/frontdoor/quickstart-create-front-door?WT.mc_id=personal-blog-buhollan&#34;&gt;Azure Front Door&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Front Door bills itself as a tool for “highly available global applications”.&lt;/p&gt;

&lt;p&gt;In our case, we were less interested in that and more interested in it’s ability to let us stand up an entry point for our application and organize all of the pieces behind that single point of entry.&lt;/p&gt;

&lt;p&gt;Front Door works via a visual designer interface. It starts off by giving you a
“Frontend Host”. By default you get…&lt;appname&gt;.azurefd.net. That’s the URL via which you can access your site. You can also add a custom domain which we’ll do in a second.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*U3Vu1ZdXCJB9EGwGKMgMNQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It then wants you to identify “Backend Pools”. These are just the resources that you want to direct traffic to. For us, that’s the static site on the frontend, and the Functions app on the backend. I’ve just called mine “urlist-frontend” and “urlist-backend”. If you look inside them, they point to Storage and Functions respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*Hx92izN0y4gV91_VOIcFdA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Last, we have the routes that we want to define.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*RSG9B1U64mMza_hK_7vyUQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In our case, we have four routes…&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The root of our site, which points to urlist-frontend in our “Backend pools”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;/api which points to urlist-backend in our “Backend pools”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;/.auth which points to urlist-backend in our “Backend pools”&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A route which redirects all http traffic to https&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our custom domain gets added to the “Frontend hosts” section. We add a new domain by pointing to theurlist.azurefd.net with a www CNAME in our DNS. Front Door then verifies that is the case, and magically creates and assigns us an SSL certificate for &lt;a href=&#34;http://www.theurlist.com.&#34;&gt;www.theurlist.com&lt;/a&gt;. Not having to configure SSL was….kind of amazing.&lt;/p&gt;

&lt;p&gt;Front Door also acts as a CDN for our app. It’s just sort of built-in to the product. That means that we are cached at the edge around the globe which just increases the speed at which we can get the app into people’s browsers.&lt;/p&gt;

&lt;h2 id=&#34;solving-the-a-record-problem&#34;&gt;Solving The A Record Problem&lt;/h2&gt;

&lt;p&gt;The last thing we had to do was figure out how to get Azure Front Door behind an A record.&lt;/p&gt;

&lt;p&gt;When you stand up a custom domain, you need to give it an A record. This is often called a “naked domain”. It’s just the domain, without www. In our case, that’s theurlist.com. The problem is that A records have to be an IP address, and Front Door doesn’t give us an IP. It only gives us that theurlist.azurefd.net.&lt;/p&gt;

&lt;p&gt;To solve this, we decided to simply redirect any traffic coming to theurlist.com over to &lt;a href=&#34;http://www.theurlist.com.&#34;&gt;www.theurlist.com.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I registered the domain with NameCheap, but I was unable to get their redirect rules to reliably work. In the end, we stood up a Cloudflare instance as our DNS. Cloudflare allows us to create a CNAME for the root (@) and point it at www.theurlist.com. Now we already said you can’t do this — and you can’t according to the DNS spec. But Cloudflare allows it with something called “CNAME Flattening”.&lt;/p&gt;

&lt;h3 id=&#34;cname-flattening&#34;&gt;CNAME Flattening&lt;/h3&gt;

&lt;p&gt;When you create a CNAME and point it at the root, Cloudflare basically resolves the IP of theurlist.azurefd.net and that’s what get’s returned as the A record. The problem is that in the case of Front Door, we can’t go directly to the IP, because the IP is the load balancer. It doesn’t know which site we want if we just navigate to the IP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*e9Luold75LuZILF2LPNYww.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Since we are already going through Cloudflare to resolve our domain, we can add a page rule in Cloudflare to capture all traffic and redirect it. That orange cloud in the image above indicates that traffic flows through Cloudflare’s HTTP proxy. That’s how we can capture it and redirect it with a page rule.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2764/1*OeaUh43csd_GnsdBZ84RrA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It took me a while to figure out what I had to use a *in my path to capture the rest of the path, and then a \$1 in the redirect to pass it through.&lt;/p&gt;

&lt;p&gt;This gives us a naked domain without needing an IP address. Ship it.&lt;/p&gt;

&lt;p&gt;Azure Front Door is priced by route. The first five routes cost \$21 total. Outside of that, it is consumption based at around 25 cents per GB transferred. There is a little up-front cost here, but we get a lot more with Front Door than just an endpoint…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SSL&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CDN&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Global HTTP balancing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Application acceleration&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;System health monitoring&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;share-the-internet&#34;&gt;Share the internet&lt;/h2&gt;

&lt;p&gt;I came up with that tag line myself. Do you like it? Should I go on Shark Tank? Are we going to IPO this year?&lt;/p&gt;

&lt;p&gt;We think this application is interesting not just because it shows how &lt;em&gt;we&lt;/em&gt; would build a web application, but also because we think that the &lt;em&gt;way&lt;/em&gt; we’ve leveraged Azure provides the &lt;strong&gt;maximum amount of speed and scale for the dollar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you’re interested, you can check out Build 2019 session on The Urlist called, “The good, the bad and the ugly of serverless”.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/T5ULvFk134U&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;We hope that this application is useful for you not just from a code and architecture standpoint, but also as an actual application that you can use to share your links. We’d love to see your &lt;a href=&#34;https://github.com/the-urlist&#34;&gt;issues and PR’s&lt;/a&gt;!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>GitLens with Eric Amodio</title>
<link>https://burkeholland.github.io/posts/git-lens-eric/</link>
<pubDate>Fri, 07 Dec 2018 10:11:27 -0600</pubDate>
      
      <guid>https://burkeholland.github.io/posts/git-lens-eric/</guid>
<description>&lt;p&gt;There are only two kinds of people in the world: those who are utterly confused by Git, and those who refuse to admit it.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;img src=&#34;https://cdn-images-1.medium.com/max/2000/1*hvJgiUToHU6NEGzy397LbA.jpeg&#34; alt=&#34;&#34; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Well, ok, there are probably &lt;em&gt;some&lt;/em&gt; people who understand it, but I’m definitely not one of them.&lt;/p&gt;

&lt;p&gt;As a result, people like me (which is most of us — zero evidence to prove that so just accept it as fact and let it wash over you) tend to learn the base amount of Git that we need to get by (clone, pull, add, commit) and the rest we try really hard to avoid because we have zero confidence that we’ll be able to do it without breaking literally everything.&lt;/p&gt;

&lt;p&gt;GitLens is an extension for VS Code that puts virtually all of the functionality of Git into the editor. You then get a visual interface for all Git actions, and anytime you can actually SEE what you are doing, things get exponentially easier.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens?WT.mc_id=none-medium-buhollan&#34;&gt;GitLens for VS Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to really get to know GitLens, because I want to stop living in fear of Git. So I sat down with the creator of GitLens, Eric Amodio, and asked him to walk me through the extension, and how it works. I figured, if anyone knows Git, it’s probably this guy.&lt;/p&gt;

&lt;p&gt;So here’s 45 minutes of yours truly stumbling through what might be the best extension for VS Code, and one very patient extension creator who was nice enough to show me the way.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/YSgDQHyQASk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
</description>
</item>
    
  </channel>
</rss>